// Copyright Â© 2019 The Things Network Foundation, The Things Industries B.V.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "lorawan-stack/api/contact_info.proto";
import "lorawan-stack/api/enums.proto";
import "lorawan-stack/api/identifiers.proto";
import "lorawan-stack/api/metadata.proto";
import "lorawan-stack/api/rights.proto";

package ttn.lorawan.v3;

option go_package = "go.thethings.network/lorawan-stack/pkg/ttnpb";

// PeerInfo
message PeerInfo {
  // Port on which the gRPC server is exposed.
  uint32 grpc_port = 1 [(gogoproto.customname) = "GRPCPort"];
  // Indicates whether the gRPC server uses TLS.
  bool tls = 2 [(gogoproto.customname) = "TLS"];
  // Roles of the peer.
  repeated ClusterRole roles = 3;

  // Tags of the peer
  map<string,string> tags = 4;
}

// Cluster is the message that defines a Cluster in the network.
message Cluster {
  message Endpoint {
    message GRPC {
      string host = 1;
      uint32 port = 2;
      bool tls = 3;
    }
    message HTTP {
      string host = 1;
      uint32 port = 2;
      bool tls = 3;
      string path = 4; // URL path (prefix) to use.
    }
    message MQTT {
      string host = 1;
      uint32 port = 2;
      bool tls = 3;
    }
    message UDP {
      string host = 1;
      uint32 port = 2;
      bool dtls = 3;
    }

    repeated ClusterRole roles = 1;

    oneof endpoint {
      // gRPC API endpoint.
      GRPC grpc = 2;
      // gRPC-gateway API endpoint. Prefix is inserted before endpoints specified in other protos.
      // Usually the path should be "/api/v3".
      HTTP grpc_http = 3;
      // HTTP endpoint for User Interface.
      HTTP http = 4;
      // MQTT Endpoint (only GATEWAY_SERVER, APPLICATION_SERVER).
      MQTT mqtt = 5;
      // Packet Forwarder UDP API endpoint (only GATEWAY_SERVER).
      UDP packet_forwarder_udp = 6;
      // Backend Interfaces HTTP API endpoint (only NETWORK_SERVER, APPLICATION_SERVER, JOIN_SERVER).
      HTTP backend_interfaces_http = 7;
      // Basic Station HTTP API endpoint (only GATEWAY_SERVER).
      HTTP basic_station_http = 8;
    }
  }

  ClusterIdentifiers ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.Timestamp created_at = 2 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];
  google.protobuf.Timestamp updated_at = 3 [(gogoproto.nullable) = false, (gogoproto.stdtime) = true];

  string name = 4 [(validate.rules).string.max_len = 50];
  string description = 5 [(validate.rules).string.max_len = 2000];
  map<string,string> attributes = 6 [(validate.rules).map.keys.string = {pattern: "^[a-z0-9](?:[-]?[a-z0-9]){2,}$" , max_len: 36}];
  repeated ContactInfo contact_info = 7;

  // The list of addresses this cluster has or used to have.
  // Addresses can not be removed from this list after they have been added.
  repeated string addresses = 8;

  string secret = 9;

  Location location = 10 [(gogoproto.nullable) = false, (validate.rules).message.required = true];
  string location_description = 11;

  repeated ClusterRole roles = 12;

  // Endpoints that the cluster exposses. If the `host` of the address does not
  // end with `domain_name`, then `domain_name` is appended to it.
  repeated Endpoint endpoints = 13;
}

message Clusters {
  repeated Cluster clusters = 1;
}

message GetClusterRequest {
  ClusterIdentifiers cluster_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message GetClusterIdentifiersForAddressRequest {
  string address = 1;
}

message ListClustersRequest {
  // By default we list all clusters the caller has rights on.
  // Set the user or the organization (not both) to instead list the clusters
  // where the user or organization is collaborator on.

  OrganizationOrUserIdentifiers collaborator = 1;
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
  // Order the results by this field path (must be present in the field mask).
  // Default ordering is by ID. Prepend with a minus (-) to reverse the order.
  string order = 3;
  // Limit the number of results per page.
  uint32 limit = 4 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 5;
}

message CreateClusterRequest {
  Cluster cluster = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  // Collaborator to grant all rights on the newly created cluster.
  OrganizationOrUserIdentifiers collaborator = 2 [(gogoproto.nullable) = false, (validate.rules).message.required = true];
}

message UpdateClusterRequest {
  Cluster cluster = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  google.protobuf.FieldMask field_mask = 2 [(gogoproto.nullable) = false];
}

message ListClusterCollaboratorsRequest {
  ClusterIdentifiers cluster_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  // Limit the number of results per page.
  uint32 limit = 2 [(validate.rules).uint32.lte = 1000];
  // Page number for pagination. 0 is interpreted as 1.
  uint32 page = 3;
}

message GetClusterCollaboratorRequest {
  ClusterIdentifiers cluster_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  OrganizationOrUserIdentifiers collaborator = 2 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
}

message SetClusterCollaboratorRequest {
  ClusterIdentifiers cluster_ids = 1 [(gogoproto.embed) = true, (gogoproto.nullable) = false, (validate.rules).message.required = true];
  Collaborator collaborator = 2 [(gogoproto.nullable) = false, (validate.rules).message.required = true];
}
