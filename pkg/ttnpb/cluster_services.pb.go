// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/cluster_services.proto

package ttnpb

import (
	context "context"
	fmt "fmt"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

func init() {
	proto.RegisterFile("lorawan-stack/api/cluster_services.proto", fileDescriptor_17685f40815dd3e5)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/cluster_services.proto", fileDescriptor_17685f40815dd3e5)
}

var fileDescriptor_17685f40815dd3e5 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xb1, 0xab, 0x13, 0x41,
	0x10, 0x87, 0x77, 0x54, 0x04, 0x4f, 0x50, 0xbc, 0x46, 0x39, 0x64, 0xc4, 0x68, 0x21, 0xe2, 0xdb,
	0x03, 0xdf, 0x7f, 0xa0, 0xc5, 0x6b, 0xac, 0xac, 0xc4, 0x46, 0xee, 0xce, 0x75, 0xb3, 0x24, 0x6f,
	0xf7, 0xbc, 0x9d, 0x7b, 0x41, 0x44, 0x08, 0x56, 0x29, 0x05, 0x1b, 0x4b, 0xb1, 0x4a, 0x99, 0x32,
	0x65, 0xca, 0x94, 0x01, 0x9b, 0x60, 0x95, 0xdb, 0xb5, 0x48, 0x99, 0x32, 0xa5, 0x78, 0xb9, 0xe4,
	0x91, 0x40, 0xba, 0x99, 0xb9, 0xef, 0x7e, 0xdf, 0x2c, 0x13, 0x3c, 0xe9, 0x9a, 0x22, 0xe9, 0x25,
	0xfa, 0xc4, 0x52, 0x92, 0x75, 0xe2, 0x24, 0x57, 0x71, 0xd6, 0x2d, 0x2d, 0x89, 0xe2, 0x9d, 0x15,
	0xc5, 0x85, 0xca, 0x84, 0xe5, 0x79, 0x61, 0xc8, 0x84, 0xb7, 0x88, 0x34, 0x6f, 0x68, 0x7e, 0x71,
	0x1a, 0x9d, 0x48, 0x45, 0xed, 0x32, 0xe5, 0x99, 0x39, 0x8f, 0xa5, 0x91, 0x26, 0xae, 0xb1, 0xb4,
	0xfc, 0x50, 0x77, 0x75, 0x53, 0x57, 0x9b, 0xdf, 0xa3, 0xfb, 0xd2, 0x18, 0xd9, 0x15, 0xb5, 0x21,
	0xd1, 0xda, 0x50, 0x42, 0xca, 0xe8, 0x26, 0x3c, 0x7a, 0x70, 0x74, 0x8d, 0x0d, 0xf0, 0xfc, 0x0f,
	0x04, 0xb7, 0x5f, 0x6e, 0x26, 0xaf, 0x85, 0x54, 0x96, 0x8a, 0x4f, 0xe1, 0x79, 0x70, 0xf5, 0x4c,
	0x50, 0xf8, 0x90, 0xef, 0x6f, 0xc6, 0xcf, 0x04, 0xed, 0xd0, 0x8f, 0xa5, 0xb0, 0x14, 0xdd, 0x3d,
	0x44, 0x9a, 0xef, 0xad, 0xa7, 0x5f, 0x7f, 0xff, 0xfd, 0x7e, 0xe5, 0x71, 0xd8, 0xda, 0xea, 0x6c,
	0xfc, 0x79, 0xfb, 0x7e, 0xf5, 0xde, 0xf2, 0xcb, 0xfa, 0x4b, 0xf8, 0x26, 0xb8, 0xf6, 0x4a, 0x59,
	0x0a, 0x1f, 0x1d, 0x86, 0xfd, 0x9f, 0x36, 0x81, 0x76, 0x6b, 0xbc, 0x77, 0xc4, 0x68, 0x5b, 0x77,
	0x6a, 0xe5, 0xcd, 0xf0, 0xc6, 0x4e, 0xf9, 0xe2, 0x17, 0x4c, 0x2b, 0x84, 0x59, 0x85, 0x30, 0xaf,
	0x90, 0x2d, 0x2a, 0x64, 0xcb, 0x0a, 0xd9, 0xaa, 0x42, 0xb6, 0xae, 0x10, 0xfa, 0x0e, 0x61, 0xe0,
	0x90, 0x0d, 0x1d, 0xc2, 0xc8, 0x21, 0x1b, 0x3b, 0x64, 0x13, 0x87, 0x6c, 0xea, 0x10, 0x66, 0x0e,
	0x61, 0xee, 0x90, 0x2d, 0x1c, 0xc2, 0xd2, 0x21, 0x5b, 0x39, 0x84, 0xb5, 0x43, 0xd6, 0xf7, 0xc8,
	0x06, 0x1e, 0xe1, 0x9b, 0x47, 0xf6, 0xc3, 0x23, 0xfc, 0xf4, 0xc8, 0x86, 0x1e, 0xd9, 0xc8, 0x23,
	0x8c, 0x3d, 0xc2, 0xc4, 0x23, 0xbc, 0x7d, 0x26, 0x0d, 0xa7, 0xb6, 0xa0, 0xb6, 0xd2, 0xd2, 0x72,
	0x2d, 0xa8, 0x67, 0x8a, 0x4e, 0xbc, 0x7f, 0x89, 0xbc, 0x23, 0x63, 0x22, 0x9d, 0xa7, 0xe9, 0xf5,
	0xfa, 0x10, 0xa7, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x6f, 0x57, 0xfc, 0x32, 0x02, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ClusterRegistryClient is the client API for ClusterRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ClusterRegistryClient interface {
	// Get the cluster with the given identifiers, selecting the fields given
	// by the field mask.
	Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	// List clusters, selecting the fields given by the field mask.
	List(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*Clusters, error)
}

type clusterRegistryClient struct {
	cc *grpc.ClientConn
}

func NewClusterRegistryClient(cc *grpc.ClientConn) ClusterRegistryClient {
	return &clusterRegistryClient{cc}
}

func (c *clusterRegistryClient) Get(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClusterRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterRegistryClient) List(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*Clusters, error) {
	out := new(Clusters)
	err := c.cc.Invoke(ctx, "/ttn.lorawan.v3.ClusterRegistry/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterRegistryServer is the server API for ClusterRegistry service.
type ClusterRegistryServer interface {
	// Get the cluster with the given identifiers, selecting the fields given
	// by the field mask.
	Get(context.Context, *GetClusterRequest) (*Cluster, error)
	// List clusters, selecting the fields given by the field mask.
	List(context.Context, *ListClustersRequest) (*Clusters, error)
}

func RegisterClusterRegistryServer(s *grpc.Server, srv ClusterRegistryServer) {
	s.RegisterService(&_ClusterRegistry_serviceDesc, srv)
}

func _ClusterRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClusterRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterRegistryServer).Get(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterRegistry_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterRegistryServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ttn.lorawan.v3.ClusterRegistry/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterRegistryServer).List(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClusterRegistry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ttn.lorawan.v3.ClusterRegistry",
	HandlerType: (*ClusterRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ClusterRegistry_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClusterRegistry_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lorawan-stack/api/cluster_services.proto",
}
