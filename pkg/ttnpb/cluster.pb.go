// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/cluster.proto

package ttnpb

import (
	fmt "fmt"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// PeerInfo
type PeerInfo struct {
	// Port on which the gRPC server is exposed.
	GRPCPort uint32 `protobuf:"varint,1,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	// Indicates whether the gRPC server uses TLS.
	TLS bool `protobuf:"varint,2,opt,name=tls,proto3" json:"tls,omitempty"`
	// Roles of the peer.
	Roles []ClusterRole `protobuf:"varint,3,rep,packed,name=roles,proto3,enum=ttn.lorawan.v3.ClusterRole" json:"roles,omitempty"`
	// Tags of the peer
	Tags                 map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PeerInfo) Reset()      { *m = PeerInfo{} }
func (*PeerInfo) ProtoMessage() {}
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{0}
}
func (m *PeerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PeerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PeerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PeerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PeerInfo.Merge(m, src)
}
func (m *PeerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PeerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PeerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PeerInfo proto.InternalMessageInfo

func (m *PeerInfo) GetGRPCPort() uint32 {
	if m != nil {
		return m.GRPCPort
	}
	return 0
}

func (m *PeerInfo) GetTLS() bool {
	if m != nil {
		return m.TLS
	}
	return false
}

func (m *PeerInfo) GetRoles() []ClusterRole {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *PeerInfo) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

// Cluster is the message that defines a Cluster in the network.
type Cluster struct {
	ClusterIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt          time.Time         `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt          time.Time         `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	Name               string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description        string            `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Attributes         map[string]string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContactInfo        []*ContactInfo    `protobuf:"bytes,7,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	// The list of addresses this cluster has or used to have.
	// Addresses can not be removed from this list after they have been added.
	Addresses           []string      `protobuf:"bytes,8,rep,name=addresses,proto3" json:"addresses,omitempty"`
	Secret              string        `protobuf:"bytes,9,opt,name=secret,proto3" json:"secret,omitempty"`
	Location            Location      `protobuf:"bytes,10,opt,name=location,proto3" json:"location"`
	LocationDescription string        `protobuf:"bytes,11,opt,name=location_description,json=locationDescription,proto3" json:"location_description,omitempty"`
	Roles               []ClusterRole `protobuf:"varint,12,rep,packed,name=roles,proto3,enum=ttn.lorawan.v3.ClusterRole" json:"roles,omitempty"`
	// Endpoints that the cluster exposses. If the `host` of the address does not
	// end with `domain_name`, then `domain_name` is appended to it.
	Endpoints            []*Cluster_Endpoint `protobuf:"bytes,13,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Cluster) Reset()      { *m = Cluster{} }
func (*Cluster) ProtoMessage() {}
func (*Cluster) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{1}
}
func (m *Cluster) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cluster) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cluster.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cluster) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster.Merge(m, src)
}
func (m *Cluster) XXX_Size() int {
	return m.Size()
}
func (m *Cluster) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster proto.InternalMessageInfo

func (m *Cluster) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Cluster) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Cluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cluster) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Cluster) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Cluster) GetContactInfo() []*ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Cluster) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *Cluster) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *Cluster) GetLocation() Location {
	if m != nil {
		return m.Location
	}
	return Location{}
}

func (m *Cluster) GetLocationDescription() string {
	if m != nil {
		return m.LocationDescription
	}
	return ""
}

func (m *Cluster) GetRoles() []ClusterRole {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Cluster) GetEndpoints() []*Cluster_Endpoint {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

type Cluster_Endpoint struct {
	Roles []ClusterRole `protobuf:"varint,1,rep,packed,name=roles,proto3,enum=ttn.lorawan.v3.ClusterRole" json:"roles,omitempty"`
	// Types that are valid to be assigned to Endpoint:
	//	*Cluster_Endpoint_Grpc
	//	*Cluster_Endpoint_GrpcHttp
	//	*Cluster_Endpoint_Http
	//	*Cluster_Endpoint_Mqtt
	//	*Cluster_Endpoint_PacketForwarderUdp
	//	*Cluster_Endpoint_BackendInterfacesHttp
	//	*Cluster_Endpoint_BasicStationHttp
	Endpoint             isCluster_Endpoint_Endpoint `protobuf_oneof:"endpoint"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *Cluster_Endpoint) Reset()      { *m = Cluster_Endpoint{} }
func (*Cluster_Endpoint) ProtoMessage() {}
func (*Cluster_Endpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{1, 0}
}
func (m *Cluster_Endpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cluster_Endpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cluster_Endpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cluster_Endpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_Endpoint.Merge(m, src)
}
func (m *Cluster_Endpoint) XXX_Size() int {
	return m.Size()
}
func (m *Cluster_Endpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_Endpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_Endpoint proto.InternalMessageInfo

type isCluster_Endpoint_Endpoint interface {
	isCluster_Endpoint_Endpoint()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Cluster_Endpoint_Grpc struct {
	Grpc *Cluster_Endpoint_GRPC `protobuf:"bytes,2,opt,name=grpc,proto3,oneof"`
}
type Cluster_Endpoint_GrpcHttp struct {
	GrpcHttp *Cluster_Endpoint_HTTP `protobuf:"bytes,3,opt,name=grpc_http,json=grpcHttp,proto3,oneof"`
}
type Cluster_Endpoint_Http struct {
	Http *Cluster_Endpoint_HTTP `protobuf:"bytes,4,opt,name=http,proto3,oneof"`
}
type Cluster_Endpoint_Mqtt struct {
	Mqtt *Cluster_Endpoint_MQTT `protobuf:"bytes,5,opt,name=mqtt,proto3,oneof"`
}
type Cluster_Endpoint_PacketForwarderUdp struct {
	PacketForwarderUdp *Cluster_Endpoint_UDP `protobuf:"bytes,6,opt,name=packet_forwarder_udp,json=packetForwarderUdp,proto3,oneof"`
}
type Cluster_Endpoint_BackendInterfacesHttp struct {
	BackendInterfacesHttp *Cluster_Endpoint_HTTP `protobuf:"bytes,7,opt,name=backend_interfaces_http,json=backendInterfacesHttp,proto3,oneof"`
}
type Cluster_Endpoint_BasicStationHttp struct {
	BasicStationHttp *Cluster_Endpoint_HTTP `protobuf:"bytes,8,opt,name=basic_station_http,json=basicStationHttp,proto3,oneof"`
}

func (*Cluster_Endpoint_Grpc) isCluster_Endpoint_Endpoint()                  {}
func (*Cluster_Endpoint_GrpcHttp) isCluster_Endpoint_Endpoint()              {}
func (*Cluster_Endpoint_Http) isCluster_Endpoint_Endpoint()                  {}
func (*Cluster_Endpoint_Mqtt) isCluster_Endpoint_Endpoint()                  {}
func (*Cluster_Endpoint_PacketForwarderUdp) isCluster_Endpoint_Endpoint()    {}
func (*Cluster_Endpoint_BackendInterfacesHttp) isCluster_Endpoint_Endpoint() {}
func (*Cluster_Endpoint_BasicStationHttp) isCluster_Endpoint_Endpoint()      {}

func (m *Cluster_Endpoint) GetEndpoint() isCluster_Endpoint_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (m *Cluster_Endpoint) GetRoles() []ClusterRole {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *Cluster_Endpoint) GetGrpc() *Cluster_Endpoint_GRPC {
	if x, ok := m.GetEndpoint().(*Cluster_Endpoint_Grpc); ok {
		return x.Grpc
	}
	return nil
}

func (m *Cluster_Endpoint) GetGrpcHttp() *Cluster_Endpoint_HTTP {
	if x, ok := m.GetEndpoint().(*Cluster_Endpoint_GrpcHttp); ok {
		return x.GrpcHttp
	}
	return nil
}

func (m *Cluster_Endpoint) GetHttp() *Cluster_Endpoint_HTTP {
	if x, ok := m.GetEndpoint().(*Cluster_Endpoint_Http); ok {
		return x.Http
	}
	return nil
}

func (m *Cluster_Endpoint) GetMqtt() *Cluster_Endpoint_MQTT {
	if x, ok := m.GetEndpoint().(*Cluster_Endpoint_Mqtt); ok {
		return x.Mqtt
	}
	return nil
}

func (m *Cluster_Endpoint) GetPacketForwarderUdp() *Cluster_Endpoint_UDP {
	if x, ok := m.GetEndpoint().(*Cluster_Endpoint_PacketForwarderUdp); ok {
		return x.PacketForwarderUdp
	}
	return nil
}

func (m *Cluster_Endpoint) GetBackendInterfacesHttp() *Cluster_Endpoint_HTTP {
	if x, ok := m.GetEndpoint().(*Cluster_Endpoint_BackendInterfacesHttp); ok {
		return x.BackendInterfacesHttp
	}
	return nil
}

func (m *Cluster_Endpoint) GetBasicStationHttp() *Cluster_Endpoint_HTTP {
	if x, ok := m.GetEndpoint().(*Cluster_Endpoint_BasicStationHttp); ok {
		return x.BasicStationHttp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Cluster_Endpoint) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Cluster_Endpoint_OneofMarshaler, _Cluster_Endpoint_OneofUnmarshaler, _Cluster_Endpoint_OneofSizer, []interface{}{
		(*Cluster_Endpoint_Grpc)(nil),
		(*Cluster_Endpoint_GrpcHttp)(nil),
		(*Cluster_Endpoint_Http)(nil),
		(*Cluster_Endpoint_Mqtt)(nil),
		(*Cluster_Endpoint_PacketForwarderUdp)(nil),
		(*Cluster_Endpoint_BackendInterfacesHttp)(nil),
		(*Cluster_Endpoint_BasicStationHttp)(nil),
	}
}

func _Cluster_Endpoint_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Cluster_Endpoint)
	// endpoint
	switch x := m.Endpoint.(type) {
	case *Cluster_Endpoint_Grpc:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Grpc); err != nil {
			return err
		}
	case *Cluster_Endpoint_GrpcHttp:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GrpcHttp); err != nil {
			return err
		}
	case *Cluster_Endpoint_Http:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Http); err != nil {
			return err
		}
	case *Cluster_Endpoint_Mqtt:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Mqtt); err != nil {
			return err
		}
	case *Cluster_Endpoint_PacketForwarderUdp:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PacketForwarderUdp); err != nil {
			return err
		}
	case *Cluster_Endpoint_BackendInterfacesHttp:
		_ = b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BackendInterfacesHttp); err != nil {
			return err
		}
	case *Cluster_Endpoint_BasicStationHttp:
		_ = b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.BasicStationHttp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Cluster_Endpoint.Endpoint has unexpected type %T", x)
	}
	return nil
}

func _Cluster_Endpoint_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Cluster_Endpoint)
	switch tag {
	case 2: // endpoint.grpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_Endpoint_GRPC)
		err := b.DecodeMessage(msg)
		m.Endpoint = &Cluster_Endpoint_Grpc{msg}
		return true, err
	case 3: // endpoint.grpc_http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_Endpoint_HTTP)
		err := b.DecodeMessage(msg)
		m.Endpoint = &Cluster_Endpoint_GrpcHttp{msg}
		return true, err
	case 4: // endpoint.http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_Endpoint_HTTP)
		err := b.DecodeMessage(msg)
		m.Endpoint = &Cluster_Endpoint_Http{msg}
		return true, err
	case 5: // endpoint.mqtt
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_Endpoint_MQTT)
		err := b.DecodeMessage(msg)
		m.Endpoint = &Cluster_Endpoint_Mqtt{msg}
		return true, err
	case 6: // endpoint.packet_forwarder_udp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_Endpoint_UDP)
		err := b.DecodeMessage(msg)
		m.Endpoint = &Cluster_Endpoint_PacketForwarderUdp{msg}
		return true, err
	case 7: // endpoint.backend_interfaces_http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_Endpoint_HTTP)
		err := b.DecodeMessage(msg)
		m.Endpoint = &Cluster_Endpoint_BackendInterfacesHttp{msg}
		return true, err
	case 8: // endpoint.basic_station_http
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Cluster_Endpoint_HTTP)
		err := b.DecodeMessage(msg)
		m.Endpoint = &Cluster_Endpoint_BasicStationHttp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Cluster_Endpoint_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Cluster_Endpoint)
	// endpoint
	switch x := m.Endpoint.(type) {
	case *Cluster_Endpoint_Grpc:
		s := proto.Size(x.Grpc)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_Endpoint_GrpcHttp:
		s := proto.Size(x.GrpcHttp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_Endpoint_Http:
		s := proto.Size(x.Http)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_Endpoint_Mqtt:
		s := proto.Size(x.Mqtt)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_Endpoint_PacketForwarderUdp:
		s := proto.Size(x.PacketForwarderUdp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_Endpoint_BackendInterfacesHttp:
		s := proto.Size(x.BackendInterfacesHttp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Cluster_Endpoint_BasicStationHttp:
		s := proto.Size(x.BasicStationHttp)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Cluster_Endpoint_GRPC struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Tls                  bool     `protobuf:"varint,3,opt,name=tls,proto3" json:"tls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_Endpoint_GRPC) Reset()      { *m = Cluster_Endpoint_GRPC{} }
func (*Cluster_Endpoint_GRPC) ProtoMessage() {}
func (*Cluster_Endpoint_GRPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{1, 0, 0}
}
func (m *Cluster_Endpoint_GRPC) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cluster_Endpoint_GRPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cluster_Endpoint_GRPC.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cluster_Endpoint_GRPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_Endpoint_GRPC.Merge(m, src)
}
func (m *Cluster_Endpoint_GRPC) XXX_Size() int {
	return m.Size()
}
func (m *Cluster_Endpoint_GRPC) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_Endpoint_GRPC.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_Endpoint_GRPC proto.InternalMessageInfo

func (m *Cluster_Endpoint_GRPC) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Cluster_Endpoint_GRPC) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Cluster_Endpoint_GRPC) GetTls() bool {
	if m != nil {
		return m.Tls
	}
	return false
}

type Cluster_Endpoint_HTTP struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Tls                  bool     `protobuf:"varint,3,opt,name=tls,proto3" json:"tls,omitempty"`
	Path                 string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_Endpoint_HTTP) Reset()      { *m = Cluster_Endpoint_HTTP{} }
func (*Cluster_Endpoint_HTTP) ProtoMessage() {}
func (*Cluster_Endpoint_HTTP) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{1, 0, 1}
}
func (m *Cluster_Endpoint_HTTP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cluster_Endpoint_HTTP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cluster_Endpoint_HTTP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cluster_Endpoint_HTTP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_Endpoint_HTTP.Merge(m, src)
}
func (m *Cluster_Endpoint_HTTP) XXX_Size() int {
	return m.Size()
}
func (m *Cluster_Endpoint_HTTP) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_Endpoint_HTTP.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_Endpoint_HTTP proto.InternalMessageInfo

func (m *Cluster_Endpoint_HTTP) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Cluster_Endpoint_HTTP) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Cluster_Endpoint_HTTP) GetTls() bool {
	if m != nil {
		return m.Tls
	}
	return false
}

func (m *Cluster_Endpoint_HTTP) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

type Cluster_Endpoint_MQTT struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Tls                  bool     `protobuf:"varint,3,opt,name=tls,proto3" json:"tls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_Endpoint_MQTT) Reset()      { *m = Cluster_Endpoint_MQTT{} }
func (*Cluster_Endpoint_MQTT) ProtoMessage() {}
func (*Cluster_Endpoint_MQTT) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{1, 0, 2}
}
func (m *Cluster_Endpoint_MQTT) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cluster_Endpoint_MQTT) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cluster_Endpoint_MQTT.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cluster_Endpoint_MQTT) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_Endpoint_MQTT.Merge(m, src)
}
func (m *Cluster_Endpoint_MQTT) XXX_Size() int {
	return m.Size()
}
func (m *Cluster_Endpoint_MQTT) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_Endpoint_MQTT.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_Endpoint_MQTT proto.InternalMessageInfo

func (m *Cluster_Endpoint_MQTT) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Cluster_Endpoint_MQTT) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Cluster_Endpoint_MQTT) GetTls() bool {
	if m != nil {
		return m.Tls
	}
	return false
}

type Cluster_Endpoint_UDP struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 uint32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Dtls                 bool     `protobuf:"varint,3,opt,name=dtls,proto3" json:"dtls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cluster_Endpoint_UDP) Reset()      { *m = Cluster_Endpoint_UDP{} }
func (*Cluster_Endpoint_UDP) ProtoMessage() {}
func (*Cluster_Endpoint_UDP) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{1, 0, 3}
}
func (m *Cluster_Endpoint_UDP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cluster_Endpoint_UDP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cluster_Endpoint_UDP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cluster_Endpoint_UDP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cluster_Endpoint_UDP.Merge(m, src)
}
func (m *Cluster_Endpoint_UDP) XXX_Size() int {
	return m.Size()
}
func (m *Cluster_Endpoint_UDP) XXX_DiscardUnknown() {
	xxx_messageInfo_Cluster_Endpoint_UDP.DiscardUnknown(m)
}

var xxx_messageInfo_Cluster_Endpoint_UDP proto.InternalMessageInfo

func (m *Cluster_Endpoint_UDP) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Cluster_Endpoint_UDP) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Cluster_Endpoint_UDP) GetDtls() bool {
	if m != nil {
		return m.Dtls
	}
	return false
}

type Clusters struct {
	Clusters             []*Cluster `protobuf:"bytes,1,rep,name=clusters,proto3" json:"clusters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Clusters) Reset()      { *m = Clusters{} }
func (*Clusters) ProtoMessage() {}
func (*Clusters) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{2}
}
func (m *Clusters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Clusters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Clusters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Clusters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Clusters.Merge(m, src)
}
func (m *Clusters) XXX_Size() int {
	return m.Size()
}
func (m *Clusters) XXX_DiscardUnknown() {
	xxx_messageInfo_Clusters.DiscardUnknown(m)
}

var xxx_messageInfo_Clusters proto.InternalMessageInfo

func (m *Clusters) GetClusters() []*Cluster {
	if m != nil {
		return m.Clusters
	}
	return nil
}

type GetClusterRequest struct {
	ClusterIdentifiers   `protobuf:"bytes,1,opt,name=cluster_ids,json=clusterIds,proto3,embedded=cluster_ids" json:"cluster_ids"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetClusterRequest) Reset()      { *m = GetClusterRequest{} }
func (*GetClusterRequest) ProtoMessage() {}
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{3}
}
func (m *GetClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterRequest.Merge(m, src)
}
func (m *GetClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterRequest proto.InternalMessageInfo

func (m *GetClusterRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type GetClusterIdentifiersForAddressRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetClusterIdentifiersForAddressRequest) Reset() {
	*m = GetClusterIdentifiersForAddressRequest{}
}
func (*GetClusterIdentifiersForAddressRequest) ProtoMessage() {}
func (*GetClusterIdentifiersForAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{4}
}
func (m *GetClusterIdentifiersForAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterIdentifiersForAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterIdentifiersForAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterIdentifiersForAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterIdentifiersForAddressRequest.Merge(m, src)
}
func (m *GetClusterIdentifiersForAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterIdentifiersForAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterIdentifiersForAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterIdentifiersForAddressRequest proto.InternalMessageInfo

func (m *GetClusterIdentifiersForAddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type ListClustersRequest struct {
	Collaborator *OrganizationOrUserIdentifiers `protobuf:"bytes,1,opt,name=collaborator,proto3" json:"collaborator,omitempty"`
	FieldMask    types.FieldMask                `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,5,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClustersRequest) Reset()      { *m = ListClustersRequest{} }
func (*ListClustersRequest) ProtoMessage() {}
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{5}
}
func (m *ListClustersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClustersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClustersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClustersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClustersRequest.Merge(m, src)
}
func (m *ListClustersRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListClustersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClustersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClustersRequest proto.InternalMessageInfo

func (m *ListClustersRequest) GetCollaborator() *OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return nil
}

func (m *ListClustersRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func (m *ListClustersRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ListClustersRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListClustersRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CreateClusterRequest struct {
	Cluster `protobuf:"bytes,1,opt,name=cluster,proto3,embedded=cluster" json:"cluster"`
	// Collaborator to grant all rights on the newly created cluster.
	Collaborator         OrganizationOrUserIdentifiers `protobuf:"bytes,2,opt,name=collaborator,proto3" json:"collaborator"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *CreateClusterRequest) Reset()      { *m = CreateClusterRequest{} }
func (*CreateClusterRequest) ProtoMessage() {}
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{6}
}
func (m *CreateClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateClusterRequest.Merge(m, src)
}
func (m *CreateClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateClusterRequest proto.InternalMessageInfo

func (m *CreateClusterRequest) GetCollaborator() OrganizationOrUserIdentifiers {
	if m != nil {
		return m.Collaborator
	}
	return OrganizationOrUserIdentifiers{}
}

type UpdateClusterRequest struct {
	Cluster              `protobuf:"bytes,1,opt,name=cluster,proto3,embedded=cluster" json:"cluster"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateClusterRequest) Reset()      { *m = UpdateClusterRequest{} }
func (*UpdateClusterRequest) ProtoMessage() {}
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{7}
}
func (m *UpdateClusterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateClusterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateClusterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateClusterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateClusterRequest.Merge(m, src)
}
func (m *UpdateClusterRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateClusterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateClusterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateClusterRequest proto.InternalMessageInfo

func (m *UpdateClusterRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListClusterCollaboratorsRequest struct {
	ClusterIdentifiers `protobuf:"bytes,1,opt,name=cluster_ids,json=clusterIds,proto3,embedded=cluster_ids" json:"cluster_ids"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListClusterCollaboratorsRequest) Reset()      { *m = ListClusterCollaboratorsRequest{} }
func (*ListClusterCollaboratorsRequest) ProtoMessage() {}
func (*ListClusterCollaboratorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{8}
}
func (m *ListClusterCollaboratorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListClusterCollaboratorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListClusterCollaboratorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListClusterCollaboratorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListClusterCollaboratorsRequest.Merge(m, src)
}
func (m *ListClusterCollaboratorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListClusterCollaboratorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListClusterCollaboratorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListClusterCollaboratorsRequest proto.InternalMessageInfo

func (m *ListClusterCollaboratorsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListClusterCollaboratorsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type GetClusterCollaboratorRequest struct {
	ClusterIdentifiers            `protobuf:"bytes,1,opt,name=cluster_ids,json=clusterIds,proto3,embedded=cluster_ids" json:"cluster_ids"`
	OrganizationOrUserIdentifiers `protobuf:"bytes,2,opt,name=collaborator,proto3,embedded=collaborator" json:"collaborator"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *GetClusterCollaboratorRequest) Reset()      { *m = GetClusterCollaboratorRequest{} }
func (*GetClusterCollaboratorRequest) ProtoMessage() {}
func (*GetClusterCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{9}
}
func (m *GetClusterCollaboratorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetClusterCollaboratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetClusterCollaboratorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetClusterCollaboratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetClusterCollaboratorRequest.Merge(m, src)
}
func (m *GetClusterCollaboratorRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetClusterCollaboratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetClusterCollaboratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetClusterCollaboratorRequest proto.InternalMessageInfo

type SetClusterCollaboratorRequest struct {
	ClusterIdentifiers   `protobuf:"bytes,1,opt,name=cluster_ids,json=clusterIds,proto3,embedded=cluster_ids" json:"cluster_ids"`
	Collaborator         Collaborator `protobuf:"bytes,2,opt,name=collaborator,proto3" json:"collaborator"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SetClusterCollaboratorRequest) Reset()      { *m = SetClusterCollaboratorRequest{} }
func (*SetClusterCollaboratorRequest) ProtoMessage() {}
func (*SetClusterCollaboratorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5716c3fcd711eefd, []int{10}
}
func (m *SetClusterCollaboratorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetClusterCollaboratorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetClusterCollaboratorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetClusterCollaboratorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetClusterCollaboratorRequest.Merge(m, src)
}
func (m *SetClusterCollaboratorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetClusterCollaboratorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetClusterCollaboratorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetClusterCollaboratorRequest proto.InternalMessageInfo

func (m *SetClusterCollaboratorRequest) GetCollaborator() Collaborator {
	if m != nil {
		return m.Collaborator
	}
	return Collaborator{}
}

func init() {
	proto.RegisterType((*PeerInfo)(nil), "ttn.lorawan.v3.PeerInfo")
	golang_proto.RegisterType((*PeerInfo)(nil), "ttn.lorawan.v3.PeerInfo")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.PeerInfo.TagsEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.PeerInfo.TagsEntry")
	proto.RegisterType((*Cluster)(nil), "ttn.lorawan.v3.Cluster")
	golang_proto.RegisterType((*Cluster)(nil), "ttn.lorawan.v3.Cluster")
	proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Cluster.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "ttn.lorawan.v3.Cluster.AttributesEntry")
	proto.RegisterType((*Cluster_Endpoint)(nil), "ttn.lorawan.v3.Cluster.Endpoint")
	golang_proto.RegisterType((*Cluster_Endpoint)(nil), "ttn.lorawan.v3.Cluster.Endpoint")
	proto.RegisterType((*Cluster_Endpoint_GRPC)(nil), "ttn.lorawan.v3.Cluster.Endpoint.GRPC")
	golang_proto.RegisterType((*Cluster_Endpoint_GRPC)(nil), "ttn.lorawan.v3.Cluster.Endpoint.GRPC")
	proto.RegisterType((*Cluster_Endpoint_HTTP)(nil), "ttn.lorawan.v3.Cluster.Endpoint.HTTP")
	golang_proto.RegisterType((*Cluster_Endpoint_HTTP)(nil), "ttn.lorawan.v3.Cluster.Endpoint.HTTP")
	proto.RegisterType((*Cluster_Endpoint_MQTT)(nil), "ttn.lorawan.v3.Cluster.Endpoint.MQTT")
	golang_proto.RegisterType((*Cluster_Endpoint_MQTT)(nil), "ttn.lorawan.v3.Cluster.Endpoint.MQTT")
	proto.RegisterType((*Cluster_Endpoint_UDP)(nil), "ttn.lorawan.v3.Cluster.Endpoint.UDP")
	golang_proto.RegisterType((*Cluster_Endpoint_UDP)(nil), "ttn.lorawan.v3.Cluster.Endpoint.UDP")
	proto.RegisterType((*Clusters)(nil), "ttn.lorawan.v3.Clusters")
	golang_proto.RegisterType((*Clusters)(nil), "ttn.lorawan.v3.Clusters")
	proto.RegisterType((*GetClusterRequest)(nil), "ttn.lorawan.v3.GetClusterRequest")
	golang_proto.RegisterType((*GetClusterRequest)(nil), "ttn.lorawan.v3.GetClusterRequest")
	proto.RegisterType((*GetClusterIdentifiersForAddressRequest)(nil), "ttn.lorawan.v3.GetClusterIdentifiersForAddressRequest")
	golang_proto.RegisterType((*GetClusterIdentifiersForAddressRequest)(nil), "ttn.lorawan.v3.GetClusterIdentifiersForAddressRequest")
	proto.RegisterType((*ListClustersRequest)(nil), "ttn.lorawan.v3.ListClustersRequest")
	golang_proto.RegisterType((*ListClustersRequest)(nil), "ttn.lorawan.v3.ListClustersRequest")
	proto.RegisterType((*CreateClusterRequest)(nil), "ttn.lorawan.v3.CreateClusterRequest")
	golang_proto.RegisterType((*CreateClusterRequest)(nil), "ttn.lorawan.v3.CreateClusterRequest")
	proto.RegisterType((*UpdateClusterRequest)(nil), "ttn.lorawan.v3.UpdateClusterRequest")
	golang_proto.RegisterType((*UpdateClusterRequest)(nil), "ttn.lorawan.v3.UpdateClusterRequest")
	proto.RegisterType((*ListClusterCollaboratorsRequest)(nil), "ttn.lorawan.v3.ListClusterCollaboratorsRequest")
	golang_proto.RegisterType((*ListClusterCollaboratorsRequest)(nil), "ttn.lorawan.v3.ListClusterCollaboratorsRequest")
	proto.RegisterType((*GetClusterCollaboratorRequest)(nil), "ttn.lorawan.v3.GetClusterCollaboratorRequest")
	golang_proto.RegisterType((*GetClusterCollaboratorRequest)(nil), "ttn.lorawan.v3.GetClusterCollaboratorRequest")
	proto.RegisterType((*SetClusterCollaboratorRequest)(nil), "ttn.lorawan.v3.SetClusterCollaboratorRequest")
	golang_proto.RegisterType((*SetClusterCollaboratorRequest)(nil), "ttn.lorawan.v3.SetClusterCollaboratorRequest")
}

func init() { proto.RegisterFile("lorawan-stack/api/cluster.proto", fileDescriptor_5716c3fcd711eefd) }
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/cluster.proto", fileDescriptor_5716c3fcd711eefd)
}

var fileDescriptor_5716c3fcd711eefd = []byte{
	// 1442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x4d, 0x6c, 0x13, 0x47,
	0x1b, 0xde, 0x89, 0x9d, 0xc4, 0x9e, 0x10, 0xe0, 0x1b, 0xf2, 0x7d, 0xec, 0xe7, 0x92, 0xb1, 0xe5,
	0xa6, 0x34, 0x54, 0x78, 0x53, 0x82, 0xd4, 0x1f, 0xaa, 0x92, 0xc6, 0x09, 0x10, 0x24, 0x10, 0x61,
	0x71, 0xd4, 0xaa, 0x88, 0x5a, 0xe3, 0xdd, 0xf1, 0x66, 0x15, 0x7b, 0x77, 0x99, 0x1d, 0x27, 0x0d,
	0x55, 0x25, 0x8e, 0xa8, 0x27, 0x8e, 0x55, 0x0f, 0x55, 0xd5, 0x13, 0x97, 0x4a, 0x1c, 0x51, 0xd5,
	0x43, 0x8e, 0xa8, 0xa7, 0x1c, 0x39, 0x05, 0xb2, 0xbe, 0xd0, 0x1b, 0x87, 0x22, 0x71, 0xac, 0x66,
	0x76, 0xd7, 0x76, 0xec, 0xa4, 0x49, 0x48, 0x51, 0x6f, 0xf3, 0xf3, 0xbc, 0xcf, 0xbc, 0x3f, 0xcf,
	0xbc, 0xb3, 0x0b, 0xb3, 0x35, 0x97, 0x91, 0x15, 0xe2, 0x14, 0x7c, 0x4e, 0x8c, 0xa5, 0x09, 0xe2,
	0xd9, 0x13, 0x46, 0xad, 0xe1, 0x73, 0xca, 0x34, 0x8f, 0xb9, 0xdc, 0x45, 0x87, 0x39, 0x77, 0xb4,
	0x08, 0xa4, 0x2d, 0x9f, 0xcd, 0x4c, 0x5b, 0x36, 0x5f, 0x6c, 0x54, 0x34, 0xc3, 0xad, 0x4f, 0x50,
	0x67, 0xd9, 0x5d, 0xf5, 0x98, 0xfb, 0xf5, 0xea, 0x84, 0x04, 0x1b, 0x05, 0x8b, 0x3a, 0x85, 0x65,
	0x52, 0xb3, 0x4d, 0xc2, 0xe9, 0x44, 0xcf, 0x20, 0xa4, 0xcc, 0x14, 0x3a, 0x28, 0x2c, 0xd7, 0x72,
	0x43, 0xe3, 0x4a, 0xa3, 0x2a, 0x67, 0x72, 0x22, 0x47, 0x11, 0x3c, 0x67, 0xb9, 0xae, 0x55, 0xa3,
	0x6d, 0x54, 0xd5, 0xa6, 0x35, 0xb3, 0x5c, 0x27, 0xfe, 0x52, 0x84, 0xc8, 0x76, 0x23, 0xb8, 0x5d,
	0xa7, 0x3e, 0x27, 0x75, 0x2f, 0x02, 0x8c, 0x6d, 0x13, 0xa5, 0xeb, 0x70, 0x62, 0xf0, 0xb2, 0xed,
	0x54, 0xe3, 0x83, 0x46, 0x7b, 0x51, 0xd4, 0x69, 0xd4, 0xfd, 0x68, 0xfb, 0xed, 0xde, 0x6d, 0xdb,
	0xa4, 0x0e, 0xb7, 0xab, 0x36, 0x65, 0x31, 0x28, 0xd7, 0x0b, 0xaa, 0x53, 0x4e, 0x4c, 0xc2, 0x49,
	0x84, 0xc0, 0xbd, 0x08, 0x66, 0x5b, 0x8b, 0x3c, 0x62, 0xc8, 0xff, 0x09, 0x60, 0x6a, 0x9e, 0x52,
	0x76, 0xd9, 0xa9, 0xba, 0xe8, 0x14, 0x4c, 0x5b, 0xcc, 0x33, 0xca, 0x9e, 0xcb, 0xb8, 0x0a, 0x72,
	0x60, 0x7c, 0xb8, 0x78, 0x28, 0xd8, 0xc8, 0xa6, 0x2e, 0xe9, 0xf3, 0x33, 0xf3, 0x2e, 0xe3, 0x7a,
	0x4a, 0x6c, 0x8b, 0x11, 0xfa, 0x3f, 0x4c, 0xf0, 0x9a, 0xaf, 0xf6, 0xe5, 0xc0, 0x78, 0xaa, 0x38,
	0x18, 0x6c, 0x64, 0x13, 0xa5, 0x2b, 0x37, 0x74, 0xb1, 0x86, 0xce, 0xc0, 0x7e, 0xe6, 0xd6, 0xa8,
	0xaf, 0x26, 0x72, 0x89, 0xf1, 0xc3, 0x93, 0x6f, 0x69, 0x5b, 0x6b, 0xaa, 0xcd, 0x84, 0x15, 0xd7,
	0xdd, 0x1a, 0xd5, 0x43, 0x24, 0xfa, 0x00, 0x26, 0x39, 0xb1, 0x7c, 0x35, 0x99, 0x4b, 0x8c, 0x0f,
	0x4d, 0xe6, 0xbb, 0x2d, 0x62, 0x07, 0xb5, 0x12, 0xb1, 0xfc, 0x0b, 0x0e, 0x67, 0xab, 0xba, 0xc4,
	0x67, 0x3e, 0x84, 0xe9, 0xd6, 0x12, 0x3a, 0x0a, 0x13, 0x4b, 0x74, 0x55, 0xfa, 0x9d, 0xd6, 0xc5,
	0x10, 0x8d, 0xc0, 0xfe, 0x65, 0x52, 0x6b, 0x50, 0xe9, 0x66, 0x5a, 0x0f, 0x27, 0xe7, 0xfa, 0x3e,
	0x02, 0xf9, 0xdf, 0x86, 0xe1, 0x60, 0xe4, 0x07, 0x9a, 0x83, 0x09, 0xdb, 0xf4, 0xa5, 0xdd, 0x36,
	0x67, 0x47, 0xa8, 0xcb, 0xed, 0xdc, 0x17, 0xd1, 0xe3, 0x8d, 0xac, 0xb2, 0xbe, 0x91, 0x05, 0xbf,
	0xfe, 0xb1, 0x96, 0xe8, 0xff, 0x0e, 0xf4, 0x1d, 0x05, 0xba, 0xa0, 0x40, 0x33, 0x10, 0x1a, 0x8c,
	0x12, 0x4e, 0xcd, 0x32, 0xe1, 0xf2, 0xd0, 0xa1, 0xc9, 0x8c, 0x16, 0xca, 0x45, 0x8b, 0xe5, 0xa2,
	0x95, 0x62, 0xb9, 0x14, 0x53, 0x82, 0xe8, 0xfe, 0xd3, 0x2c, 0xd0, 0xd3, 0x91, 0xdd, 0x34, 0x17,
	0x24, 0x0d, 0xcf, 0x8c, 0x49, 0x12, 0xfb, 0x21, 0x89, 0xec, 0xa6, 0x39, 0x1a, 0x85, 0x49, 0x87,
	0xd4, 0xa9, 0x9a, 0x14, 0x81, 0x17, 0xd3, 0xc2, 0xd1, 0x24, 0xeb, 0x53, 0x27, 0x75, 0xb9, 0x8c,
	0x4e, 0xc3, 0x21, 0x93, 0xfa, 0x06, 0xb3, 0x3d, 0x6e, 0xbb, 0x8e, 0xda, 0x2f, 0x51, 0x50, 0x86,
	0xc3, 0x12, 0xea, 0xfa, 0x11, 0xbd, 0x73, 0x1b, 0xad, 0x40, 0x48, 0x38, 0x67, 0x76, 0xa5, 0xc1,
	0xa9, 0xaf, 0x0e, 0xc8, 0x1a, 0xbd, 0xbb, 0x43, 0x9e, 0xb4, 0xe9, 0x16, 0x52, 0x56, 0xa5, 0xa8,
	0x09, 0xd6, 0x53, 0x3f, 0x80, 0x93, 0xf9, 0x31, 0x96, 0x57, 0xc7, 0x26, 0xf1, 0x57, 0x37, 0x49,
	0xe1, 0xce, 0xfb, 0x85, 0x8f, 0x6f, 0x8d, 0x4f, 0x9d, 0xbb, 0x59, 0xb8, 0x35, 0x15, 0x4f, 0x4f,
	0x7d, 0x33, 0x79, 0xfa, 0xdb, 0x31, 0xbd, 0xe3, 0x28, 0x74, 0x1e, 0x1e, 0xea, 0xbc, 0x38, 0xea,
	0xa0, 0x3c, 0xba, 0x57, 0x50, 0x21, 0x46, 0x28, 0x44, 0x1f, 0x32, 0xda, 0x13, 0x74, 0x02, 0xa6,
	0x89, 0x69, 0x32, 0xea, 0xfb, 0xd4, 0x57, 0x53, 0xb9, 0xc4, 0x78, 0x5a, 0x6f, 0x2f, 0xa0, 0xff,
	0xc1, 0x01, 0x9f, 0x1a, 0x8c, 0x72, 0x35, 0x2d, 0xe5, 0x11, 0xcd, 0xd0, 0x2c, 0x4c, 0xd5, 0x5c,
	0x83, 0xc8, 0xcc, 0x40, 0x99, 0x7e, 0xb5, 0xfb, 0xc4, 0x2b, 0xd1, 0x7e, 0xf1, 0xb0, 0x48, 0x7e,
	0x87, 0x0c, 0x5a, 0x96, 0xe8, 0x0c, 0x1c, 0x89, 0xc7, 0xe5, 0xce, 0x5c, 0x0f, 0xc9, 0xb3, 0x8e,
	0xc5, 0x7b, 0xb3, 0x1d, 0x79, 0x6e, 0x5d, 0x9c, 0x43, 0x7b, 0xbe, 0x38, 0xe7, 0x61, 0x9a, 0x3a,
	0xa6, 0xe7, 0xda, 0x0e, 0xf7, 0xd5, 0x61, 0x99, 0x9e, 0xdc, 0x4e, 0x95, 0xb9, 0x10, 0x01, 0xf5,
	0xb6, 0x49, 0xe6, 0xe5, 0x00, 0x4c, 0xc5, 0xeb, 0xed, 0xf3, 0xc1, 0x9e, 0xcf, 0xff, 0x04, 0x26,
	0x45, 0x4b, 0x88, 0xb4, 0xfe, 0xce, 0x6e, 0x47, 0x6b, 0xa2, 0x93, 0xcc, 0x29, 0xba, 0x34, 0x42,
	0xb3, 0x51, 0xbb, 0x59, 0xe4, 0xdc, 0x8b, 0x84, 0xbe, 0x3b, 0xc3, 0x5c, 0xa9, 0x34, 0x3f, 0xa7,
	0x84, 0x9d, 0x68, 0x8e, 0x73, 0x4f, 0xb8, 0x20, 0x09, 0x92, 0xfb, 0x23, 0x90, 0x46, 0xc2, 0xb8,
	0x7e, 0x9b, 0x73, 0x79, 0x03, 0xf6, 0x62, 0x7c, 0xf5, 0x7a, 0xa9, 0x24, 0x8c, 0x85, 0x11, 0xfa,
	0x02, 0x8e, 0x78, 0xc4, 0x58, 0xa2, 0xbc, 0x5c, 0x75, 0xd9, 0x0a, 0x61, 0x26, 0x65, 0xe5, 0x86,
	0xe9, 0xa9, 0x03, 0x92, 0x6c, 0x6c, 0x57, 0xb2, 0x85, 0x59, 0xe1, 0x08, 0x0a, 0x39, 0x2e, 0xc6,
	0x14, 0x0b, 0xa6, 0x87, 0xca, 0xf0, 0x78, 0x45, 0xac, 0x3a, 0x66, 0xd9, 0x76, 0x38, 0x65, 0x55,
	0x62, 0x50, 0x3f, 0xcc, 0xd3, 0xe0, 0xfe, 0xc2, 0xfc, 0x6f, 0xc4, 0x73, 0xb9, 0x45, 0x23, 0x93,
	0xb6, 0x00, 0x51, 0x85, 0xf8, 0xb6, 0x51, 0xf6, 0x79, 0x28, 0x51, 0xc9, 0x9d, 0xda, 0x1f, 0xf7,
	0x51, 0x49, 0x71, 0x23, 0x64, 0x10, 0xb4, 0x99, 0xcf, 0x60, 0x52, 0x54, 0x18, 0x21, 0x98, 0x5c,
	0x74, 0x7d, 0x1e, 0xf5, 0x62, 0x39, 0x16, 0x6b, 0xf2, 0x5d, 0x11, 0x52, 0x19, 0xd6, 0xe5, 0x58,
	0xb4, 0x6c, 0xf1, 0x8a, 0x88, 0xda, 0xa7, 0xe4, 0xe3, 0x91, 0x29, 0xc1, 0xa4, 0x60, 0x7f, 0x7d,
	0x06, 0x89, 0x22, 0x7c, 0x31, 0x6c, 0x7d, 0xba, 0x1c, 0x0b, 0xbf, 0x44, 0xe5, 0x0e, 0xe0, 0xd7,
	0x34, 0x4c, 0x2c, 0xcc, 0xee, 0xdd, 0x2d, 0x04, 0x93, 0x66, 0x9b, 0x41, 0x8e, 0x8b, 0x10, 0xa6,
	0xe2, 0x8b, 0x97, 0xf9, 0x14, 0x1e, 0xe9, 0x6a, 0x94, 0xfb, 0x7a, 0xbe, 0xa6, 0x60, 0x2a, 0x2a,
	0x8a, 0x8f, 0xce, 0xc2, 0x54, 0xf4, 0x0d, 0x15, 0x5e, 0xdc, 0xa1, 0xc9, 0xe3, 0x3b, 0x5d, 0xdc,
	0x16, 0x30, 0xff, 0x0b, 0x80, 0xff, 0xb9, 0x44, 0x79, 0xbc, 0x41, 0x6f, 0x37, 0xa8, 0xcf, 0xd1,
	0xe7, 0x70, 0x28, 0x42, 0x94, 0x0f, 0xfe, 0x22, 0x42, 0x23, 0xc6, 0xf9, 0x68, 0x0a, 0xc2, 0xf6,
	0x67, 0xd4, 0x8e, 0x0f, 0xe3, 0x45, 0x01, 0xb9, 0x4a, 0xfc, 0xa5, 0x62, 0x52, 0xf0, 0xe9, 0xe9,
	0x6a, 0xbc, 0x90, 0x2f, 0xc2, 0x93, 0x6d, 0x77, 0x3b, 0x4e, 0xbe, 0xe8, 0xb2, 0xe9, 0xb0, 0xa1,
	0xc7, 0x31, 0xa8, 0x70, 0x30, 0x6a, 0xf1, 0x51, 0x2a, 0xe3, 0x69, 0xfe, 0x25, 0x80, 0xc7, 0xae,
	0xd8, 0x7e, 0xcc, 0xd2, 0xb2, 0xb8, 0x2e, 0x5e, 0x99, 0x5a, 0x8d, 0x54, 0x5c, 0x46, 0xb8, 0xcb,
	0xa2, 0xb0, 0x0b, 0xdd, 0x61, 0x5f, 0x63, 0x16, 0x71, 0xec, 0x3b, 0x52, 0xec, 0xd7, 0xd8, 0x82,
	0xbf, 0xc5, 0x0f, 0x7d, 0x0b, 0xc5, 0x81, 0xe3, 0x15, 0xa5, 0x77, 0x45, 0x33, 0x90, 0x02, 0x4a,
	0xeb, 0xe1, 0x04, 0xe5, 0x60, 0x7f, 0xcd, 0xae, 0xdb, 0x5c, 0x6a, 0x7b, 0x38, 0x7a, 0xb0, 0xdf,
	0x4b, 0xa8, 0xcf, 0x07, 0xf5, 0x70, 0x23, 0x14, 0xbf, 0x45, 0x65, 0x3f, 0x13, 0x5a, 0x24, 0x16,
	0xcd, 0xaf, 0x01, 0x38, 0x32, 0x23, 0x3f, 0x2f, 0xba, 0xca, 0x7d, 0x01, 0x0e, 0x46, 0x35, 0x8a,
	0x62, 0xde, 0x49, 0x38, 0xdb, 0xd6, 0x37, 0xb6, 0x45, 0xa4, 0x2b, 0x7f, 0x7d, 0xaf, 0x91, 0xbf,
	0x9e, 0x87, 0x74, 0x0b, 0x65, 0xfe, 0x47, 0x00, 0x47, 0x16, 0xe4, 0xc7, 0xcd, 0x9b, 0x09, 0xe1,
	0xc0, 0xfa, 0x7c, 0x08, 0x60, 0xb6, 0x43, 0x5b, 0x33, 0x1d, 0xce, 0xfb, 0x6f, 0xfc, 0x76, 0xb5,
	0x64, 0xd1, 0xb7, 0x9b, 0x2c, 0x12, 0x1d, 0xb2, 0x78, 0x0a, 0xe0, 0x68, 0xfb, 0x4e, 0x75, 0x7a,
	0xfc, 0xc6, 0x1d, 0xa6, 0xff, 0x84, 0x62, 0xb6, 0x3b, 0x64, 0xab, 0x6a, 0x7e, 0x07, 0x70, 0xf4,
	0xc6, 0xbf, 0x13, 0xe1, 0xfc, 0xb6, 0x11, 0x9e, 0xe8, 0xfd, 0x72, 0x6d, 0x63, 0xfe, 0xfe, 0x0a,
	0x14, 0x7f, 0x06, 0x8f, 0x37, 0x31, 0x58, 0xdf, 0xc4, 0xe0, 0xc9, 0x26, 0x56, 0x9e, 0x6d, 0x62,
	0xe5, 0xf9, 0x26, 0x56, 0x5e, 0x6c, 0x62, 0xe5, 0xd5, 0x26, 0x06, 0x77, 0x03, 0x0c, 0xee, 0x05,
	0x58, 0x79, 0x10, 0x60, 0xf0, 0x30, 0xc0, 0xca, 0xa3, 0x00, 0x2b, 0x6b, 0x01, 0x56, 0x1e, 0x07,
	0x18, 0xac, 0x07, 0x18, 0x3c, 0x09, 0xb0, 0xf2, 0x2c, 0xc0, 0xe0, 0x79, 0x80, 0x95, 0x17, 0x01,
	0x06, 0xaf, 0x02, 0xac, 0xdc, 0x6d, 0x62, 0xe5, 0x5e, 0x13, 0x83, 0xfb, 0x4d, 0xac, 0x7c, 0xdf,
	0xc4, 0xe0, 0xa7, 0x26, 0x56, 0x1e, 0x34, 0xb1, 0xf2, 0xb0, 0x89, 0xc1, 0xa3, 0x26, 0x06, 0x6b,
	0x4d, 0x0c, 0xbe, 0x3c, 0x6d, 0xb9, 0x1a, 0x5f, 0xa4, 0x7c, 0xd1, 0x76, 0x2c, 0x5f, 0x73, 0x28,
	0x5f, 0x71, 0xd9, 0xd2, 0xc4, 0xd6, 0x9f, 0x4a, 0x6f, 0xc9, 0x9a, 0xe0, 0xdc, 0xf1, 0x2a, 0x95,
	0x01, 0x79, 0x57, 0xce, 0xfe, 0x15, 0x00, 0x00, 0xff, 0xff, 0x79, 0x38, 0x61, 0x6d, 0xe8, 0x0f,
	0x00, 0x00,
}

func (this *PeerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PeerInfo)
	if !ok {
		that2, ok := that.(PeerInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GRPCPort != that1.GRPCPort {
		return false
	}
	if this.TLS != that1.TLS {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if len(this.Tags) != len(that1.Tags) {
		return false
	}
	for i := range this.Tags {
		if this.Tags[i] != that1.Tags[i] {
			return false
		}
	}
	return true
}
func (this *Cluster) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster)
	if !ok {
		that2, ok := that.(Cluster)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterIdentifiers.Equal(&that1.ClusterIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if len(this.Addresses) != len(that1.Addresses) {
		return false
	}
	for i := range this.Addresses {
		if this.Addresses[i] != that1.Addresses[i] {
			return false
		}
	}
	if this.Secret != that1.Secret {
		return false
	}
	if !this.Location.Equal(&that1.Location) {
		return false
	}
	if this.LocationDescription != that1.LocationDescription {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if len(this.Endpoints) != len(that1.Endpoints) {
		return false
	}
	for i := range this.Endpoints {
		if !this.Endpoints[i].Equal(that1.Endpoints[i]) {
			return false
		}
	}
	return true
}
func (this *Cluster_Endpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint)
	if !ok {
		that2, ok := that.(Cluster_Endpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Roles) != len(that1.Roles) {
		return false
	}
	for i := range this.Roles {
		if this.Roles[i] != that1.Roles[i] {
			return false
		}
	}
	if that1.Endpoint == nil {
		if this.Endpoint != nil {
			return false
		}
	} else if this.Endpoint == nil {
		return false
	} else if !this.Endpoint.Equal(that1.Endpoint) {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_Grpc) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_Grpc)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_Grpc)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Grpc.Equal(that1.Grpc) {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_GrpcHttp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_GrpcHttp)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_GrpcHttp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.GrpcHttp.Equal(that1.GrpcHttp) {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_Http) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_Http)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_Http)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Http.Equal(that1.Http) {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_Mqtt) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_Mqtt)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_Mqtt)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Mqtt.Equal(that1.Mqtt) {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_PacketForwarderUdp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_PacketForwarderUdp)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_PacketForwarderUdp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.PacketForwarderUdp.Equal(that1.PacketForwarderUdp) {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_BackendInterfacesHttp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_BackendInterfacesHttp)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_BackendInterfacesHttp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BackendInterfacesHttp.Equal(that1.BackendInterfacesHttp) {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_BasicStationHttp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_BasicStationHttp)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_BasicStationHttp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BasicStationHttp.Equal(that1.BasicStationHttp) {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_GRPC) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_GRPC)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_GRPC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Tls != that1.Tls {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_HTTP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_HTTP)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_HTTP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Tls != that1.Tls {
		return false
	}
	if this.Path != that1.Path {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_MQTT) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_MQTT)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_MQTT)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Tls != that1.Tls {
		return false
	}
	return true
}
func (this *Cluster_Endpoint_UDP) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cluster_Endpoint_UDP)
	if !ok {
		that2, ok := that.(Cluster_Endpoint_UDP)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Host != that1.Host {
		return false
	}
	if this.Port != that1.Port {
		return false
	}
	if this.Dtls != that1.Dtls {
		return false
	}
	return true
}
func (this *Clusters) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Clusters)
	if !ok {
		that2, ok := that.(Clusters)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Clusters) != len(that1.Clusters) {
		return false
	}
	for i := range this.Clusters {
		if !this.Clusters[i].Equal(that1.Clusters[i]) {
			return false
		}
	}
	return true
}
func (this *GetClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterRequest)
	if !ok {
		that2, ok := that.(GetClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterIdentifiers.Equal(&that1.ClusterIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *GetClusterIdentifiersForAddressRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterIdentifiersForAddressRequest)
	if !ok {
		that2, ok := that.(GetClusterIdentifiersForAddressRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	return true
}
func (this *ListClustersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClustersRequest)
	if !ok {
		that2, ok := that.(ListClustersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Collaborator.Equal(that1.Collaborator) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *CreateClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateClusterRequest)
	if !ok {
		that2, ok := that.(CreateClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cluster.Equal(&that1.Cluster) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (this *UpdateClusterRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateClusterRequest)
	if !ok {
		that2, ok := that.(UpdateClusterRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Cluster.Equal(&that1.Cluster) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListClusterCollaboratorsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListClusterCollaboratorsRequest)
	if !ok {
		that2, ok := that.(ListClusterCollaboratorsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterIdentifiers.Equal(&that1.ClusterIdentifiers) {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *GetClusterCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetClusterCollaboratorRequest)
	if !ok {
		that2, ok := that.(GetClusterCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterIdentifiers.Equal(&that1.ClusterIdentifiers) {
		return false
	}
	if !this.OrganizationOrUserIdentifiers.Equal(&that1.OrganizationOrUserIdentifiers) {
		return false
	}
	return true
}
func (this *SetClusterCollaboratorRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SetClusterCollaboratorRequest)
	if !ok {
		that2, ok := that.(SetClusterCollaboratorRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ClusterIdentifiers.Equal(&that1.ClusterIdentifiers) {
		return false
	}
	if !this.Collaborator.Equal(&that1.Collaborator) {
		return false
	}
	return true
}
func (m *PeerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PeerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.GRPCPort != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.GRPCPort))
	}
	if m.TLS {
		dAtA[i] = 0x10
		i++
		if m.TLS {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Roles) > 0 {
		dAtA2 := make([]byte, len(m.Roles)*10)
		var j1 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if len(m.Tags) > 0 {
		for k := range m.Tags {
			dAtA[i] = 0x22
			i++
			v := m.Tags[k]
			mapSize := 1 + len(k) + sovCluster(uint64(len(k))) + 1 + len(v) + sovCluster(uint64(len(v)))
			i = encodeVarintCluster(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCluster(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCluster(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	return i, nil
}

func (m *Cluster) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.ClusterIdentifiers.Size()))
	n3, err := m.ClusterIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x12
	i++
	i = encodeVarintCluster(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)))
	n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	dAtA[i] = 0x1a
	i++
	i = encodeVarintCluster(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)))
	n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if len(m.Name) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			dAtA[i] = 0x32
			i++
			v := m.Attributes[k]
			mapSize := 1 + len(k) + sovCluster(uint64(len(k))) + 1 + len(v) + sovCluster(uint64(len(v)))
			i = encodeVarintCluster(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCluster(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCluster(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, msg := range m.ContactInfo {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			dAtA[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Secret) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Secret)))
		i += copy(dAtA[i:], m.Secret)
	}
	dAtA[i] = 0x52
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.Location.Size()))
	n6, err := m.Location.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if len(m.LocationDescription) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.LocationDescription)))
		i += copy(dAtA[i:], m.LocationDescription)
	}
	if len(m.Roles) > 0 {
		dAtA8 := make([]byte, len(m.Roles)*10)
		var j7 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x62
		i++
		i = encodeVarintCluster(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.Endpoints) > 0 {
		for _, msg := range m.Endpoints {
			dAtA[i] = 0x6a
			i++
			i = encodeVarintCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Cluster_Endpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster_Endpoint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Roles) > 0 {
		dAtA10 := make([]byte, len(m.Roles)*10)
		var j9 int
		for _, num := range m.Roles {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(j9))
		i += copy(dAtA[i:], dAtA10[:j9])
	}
	if m.Endpoint != nil {
		nn11, err := m.Endpoint.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn11
	}
	return i, nil
}

func (m *Cluster_Endpoint_Grpc) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Grpc != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Grpc.Size()))
		n12, err := m.Grpc.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *Cluster_Endpoint_GrpcHttp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.GrpcHttp != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.GrpcHttp.Size()))
		n13, err := m.GrpcHttp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *Cluster_Endpoint_Http) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Http != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Http.Size()))
		n14, err := m.Http.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *Cluster_Endpoint_Mqtt) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Mqtt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Mqtt.Size()))
		n15, err := m.Mqtt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	return i, nil
}
func (m *Cluster_Endpoint_PacketForwarderUdp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.PacketForwarderUdp != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.PacketForwarderUdp.Size()))
		n16, err := m.PacketForwarderUdp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	return i, nil
}
func (m *Cluster_Endpoint_BackendInterfacesHttp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BackendInterfacesHttp != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.BackendInterfacesHttp.Size()))
		n17, err := m.BackendInterfacesHttp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}
func (m *Cluster_Endpoint_BasicStationHttp) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.BasicStationHttp != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.BasicStationHttp.Size()))
		n18, err := m.BasicStationHttp.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	return i, nil
}
func (m *Cluster_Endpoint_GRPC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster_Endpoint_GRPC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Port))
	}
	if m.Tls {
		dAtA[i] = 0x18
		i++
		if m.Tls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Cluster_Endpoint_HTTP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster_Endpoint_HTTP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Port))
	}
	if m.Tls {
		dAtA[i] = 0x18
		i++
		if m.Tls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Path) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	return i, nil
}

func (m *Cluster_Endpoint_MQTT) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster_Endpoint_MQTT) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Port))
	}
	if m.Tls {
		dAtA[i] = 0x18
		i++
		if m.Tls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Cluster_Endpoint_UDP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cluster_Endpoint_UDP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Host) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Host)))
		i += copy(dAtA[i:], m.Host)
	}
	if m.Port != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Port))
	}
	if m.Dtls {
		dAtA[i] = 0x18
		i++
		if m.Dtls {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Clusters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Clusters) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for _, msg := range m.Clusters {
			dAtA[i] = 0xa
			i++
			i = encodeVarintCluster(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GetClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.ClusterIdentifiers.Size()))
	n19, err := m.ClusterIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n19
	dAtA[i] = 0x12
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.FieldMask.Size()))
	n20, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n20
	return i, nil
}

func (m *GetClusterIdentifiersForAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterIdentifiersForAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func (m *ListClustersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClustersRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Collaborator != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Collaborator.Size()))
		n21, err := m.Collaborator.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.FieldMask.Size()))
	n22, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n22
	if len(m.Order) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCluster(dAtA, i, uint64(len(m.Order)))
		i += copy(dAtA[i:], m.Order)
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *CreateClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.Cluster.Size()))
	n23, err := m.Cluster.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n23
	dAtA[i] = 0x12
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.Collaborator.Size()))
	n24, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n24
	return i, nil
}

func (m *UpdateClusterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateClusterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.Cluster.Size()))
	n25, err := m.Cluster.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n25
	dAtA[i] = 0x12
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.FieldMask.Size()))
	n26, err := m.FieldMask.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n26
	return i, nil
}

func (m *ListClusterCollaboratorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListClusterCollaboratorsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.ClusterIdentifiers.Size()))
	n27, err := m.ClusterIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n27
	if m.Limit != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Limit))
	}
	if m.Page != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCluster(dAtA, i, uint64(m.Page))
	}
	return i, nil
}

func (m *GetClusterCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetClusterCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.ClusterIdentifiers.Size()))
	n28, err := m.ClusterIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n28
	dAtA[i] = 0x12
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.OrganizationOrUserIdentifiers.Size()))
	n29, err := m.OrganizationOrUserIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n29
	return i, nil
}

func (m *SetClusterCollaboratorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetClusterCollaboratorRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.ClusterIdentifiers.Size()))
	n30, err := m.ClusterIdentifiers.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n30
	dAtA[i] = 0x12
	i++
	i = encodeVarintCluster(dAtA, i, uint64(m.Collaborator.Size()))
	n31, err := m.Collaborator.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n31
	return i, nil
}

func encodeVarintCluster(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedPeerInfo(r randyCluster, easy bool) *PeerInfo {
	this := &PeerInfo{}
	this.GRPCPort = r.Uint32()
	this.TLS = bool(r.Intn(2) == 0)
	v1 := r.Intn(10)
	this.Roles = make([]ClusterRole, v1)
	for i := 0; i < v1; i++ {
		this.Roles[i] = ClusterRole([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8}[r.Intn(9)])
	}
	if r.Intn(10) != 0 {
		v2 := r.Intn(10)
		this.Tags = make(map[string]string)
		for i := 0; i < v2; i++ {
			this.Tags[randStringCluster(r)] = randStringCluster(r)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCluster(r randyCluster, easy bool) *Cluster {
	this := &Cluster{}
	v3 := NewPopulatedClusterIdentifiers(r, easy)
	this.ClusterIdentifiers = *v3
	v4 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v4
	v5 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v5
	this.Name = randStringCluster(r)
	this.Description = randStringCluster(r)
	if r.Intn(10) != 0 {
		v6 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v6; i++ {
			this.Attributes[randStringCluster(r)] = randStringCluster(r)
		}
	}
	if r.Intn(10) != 0 {
		v7 := r.Intn(5)
		this.ContactInfo = make([]*ContactInfo, v7)
		for i := 0; i < v7; i++ {
			this.ContactInfo[i] = NewPopulatedContactInfo(r, easy)
		}
	}
	v8 := r.Intn(10)
	this.Addresses = make([]string, v8)
	for i := 0; i < v8; i++ {
		this.Addresses[i] = randStringCluster(r)
	}
	this.Secret = randStringCluster(r)
	v9 := NewPopulatedLocation(r, easy)
	this.Location = *v9
	this.LocationDescription = randStringCluster(r)
	v10 := r.Intn(10)
	this.Roles = make([]ClusterRole, v10)
	for i := 0; i < v10; i++ {
		this.Roles[i] = ClusterRole([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8}[r.Intn(9)])
	}
	if r.Intn(10) != 0 {
		v11 := r.Intn(5)
		this.Endpoints = make([]*Cluster_Endpoint, v11)
		for i := 0; i < v11; i++ {
			this.Endpoints[i] = NewPopulatedCluster_Endpoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCluster_Endpoint(r randyCluster, easy bool) *Cluster_Endpoint {
	this := &Cluster_Endpoint{}
	v12 := r.Intn(10)
	this.Roles = make([]ClusterRole, v12)
	for i := 0; i < v12; i++ {
		this.Roles[i] = ClusterRole([]int32{0, 1, 2, 3, 4, 5, 6, 7, 8}[r.Intn(9)])
	}
	oneofNumber_Endpoint := []int32{2, 3, 4, 5, 6, 7, 8}[r.Intn(7)]
	switch oneofNumber_Endpoint {
	case 2:
		this.Endpoint = NewPopulatedCluster_Endpoint_Grpc(r, easy)
	case 3:
		this.Endpoint = NewPopulatedCluster_Endpoint_GrpcHttp(r, easy)
	case 4:
		this.Endpoint = NewPopulatedCluster_Endpoint_Http(r, easy)
	case 5:
		this.Endpoint = NewPopulatedCluster_Endpoint_Mqtt(r, easy)
	case 6:
		this.Endpoint = NewPopulatedCluster_Endpoint_PacketForwarderUdp(r, easy)
	case 7:
		this.Endpoint = NewPopulatedCluster_Endpoint_BackendInterfacesHttp(r, easy)
	case 8:
		this.Endpoint = NewPopulatedCluster_Endpoint_BasicStationHttp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCluster_Endpoint_Grpc(r randyCluster, easy bool) *Cluster_Endpoint_Grpc {
	this := &Cluster_Endpoint_Grpc{}
	this.Grpc = NewPopulatedCluster_Endpoint_GRPC(r, easy)
	return this
}
func NewPopulatedCluster_Endpoint_GrpcHttp(r randyCluster, easy bool) *Cluster_Endpoint_GrpcHttp {
	this := &Cluster_Endpoint_GrpcHttp{}
	this.GrpcHttp = NewPopulatedCluster_Endpoint_HTTP(r, easy)
	return this
}
func NewPopulatedCluster_Endpoint_Http(r randyCluster, easy bool) *Cluster_Endpoint_Http {
	this := &Cluster_Endpoint_Http{}
	this.Http = NewPopulatedCluster_Endpoint_HTTP(r, easy)
	return this
}
func NewPopulatedCluster_Endpoint_Mqtt(r randyCluster, easy bool) *Cluster_Endpoint_Mqtt {
	this := &Cluster_Endpoint_Mqtt{}
	this.Mqtt = NewPopulatedCluster_Endpoint_MQTT(r, easy)
	return this
}
func NewPopulatedCluster_Endpoint_PacketForwarderUdp(r randyCluster, easy bool) *Cluster_Endpoint_PacketForwarderUdp {
	this := &Cluster_Endpoint_PacketForwarderUdp{}
	this.PacketForwarderUdp = NewPopulatedCluster_Endpoint_UDP(r, easy)
	return this
}
func NewPopulatedCluster_Endpoint_BackendInterfacesHttp(r randyCluster, easy bool) *Cluster_Endpoint_BackendInterfacesHttp {
	this := &Cluster_Endpoint_BackendInterfacesHttp{}
	this.BackendInterfacesHttp = NewPopulatedCluster_Endpoint_HTTP(r, easy)
	return this
}
func NewPopulatedCluster_Endpoint_BasicStationHttp(r randyCluster, easy bool) *Cluster_Endpoint_BasicStationHttp {
	this := &Cluster_Endpoint_BasicStationHttp{}
	this.BasicStationHttp = NewPopulatedCluster_Endpoint_HTTP(r, easy)
	return this
}
func NewPopulatedCluster_Endpoint_GRPC(r randyCluster, easy bool) *Cluster_Endpoint_GRPC {
	this := &Cluster_Endpoint_GRPC{}
	this.Host = randStringCluster(r)
	this.Port = r.Uint32()
	this.Tls = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCluster_Endpoint_HTTP(r randyCluster, easy bool) *Cluster_Endpoint_HTTP {
	this := &Cluster_Endpoint_HTTP{}
	this.Host = randStringCluster(r)
	this.Port = r.Uint32()
	this.Tls = bool(r.Intn(2) == 0)
	this.Path = randStringCluster(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCluster_Endpoint_MQTT(r randyCluster, easy bool) *Cluster_Endpoint_MQTT {
	this := &Cluster_Endpoint_MQTT{}
	this.Host = randStringCluster(r)
	this.Port = r.Uint32()
	this.Tls = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCluster_Endpoint_UDP(r randyCluster, easy bool) *Cluster_Endpoint_UDP {
	this := &Cluster_Endpoint_UDP{}
	this.Host = randStringCluster(r)
	this.Port = r.Uint32()
	this.Dtls = bool(r.Intn(2) == 0)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedClusters(r randyCluster, easy bool) *Clusters {
	this := &Clusters{}
	if r.Intn(10) != 0 {
		v13 := r.Intn(5)
		this.Clusters = make([]*Cluster, v13)
		for i := 0; i < v13; i++ {
			this.Clusters[i] = NewPopulatedCluster(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetClusterRequest(r randyCluster, easy bool) *GetClusterRequest {
	this := &GetClusterRequest{}
	v14 := NewPopulatedClusterIdentifiers(r, easy)
	this.ClusterIdentifiers = *v14
	v15 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v15
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetClusterIdentifiersForAddressRequest(r randyCluster, easy bool) *GetClusterIdentifiersForAddressRequest {
	this := &GetClusterIdentifiersForAddressRequest{}
	this.Address = randStringCluster(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClustersRequest(r randyCluster, easy bool) *ListClustersRequest {
	this := &ListClustersRequest{}
	if r.Intn(10) != 0 {
		this.Collaborator = NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	}
	v16 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v16
	this.Order = randStringCluster(r)
	this.Limit = r.Uint32()
	this.Page = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateClusterRequest(r randyCluster, easy bool) *CreateClusterRequest {
	this := &CreateClusterRequest{}
	v17 := NewPopulatedCluster(r, easy)
	this.Cluster = *v17
	v18 := NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	this.Collaborator = *v18
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateClusterRequest(r randyCluster, easy bool) *UpdateClusterRequest {
	this := &UpdateClusterRequest{}
	v19 := NewPopulatedCluster(r, easy)
	this.Cluster = *v19
	v20 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v20
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListClusterCollaboratorsRequest(r randyCluster, easy bool) *ListClusterCollaboratorsRequest {
	this := &ListClusterCollaboratorsRequest{}
	v21 := NewPopulatedClusterIdentifiers(r, easy)
	this.ClusterIdentifiers = *v21
	this.Limit = r.Uint32()
	this.Page = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetClusterCollaboratorRequest(r randyCluster, easy bool) *GetClusterCollaboratorRequest {
	this := &GetClusterCollaboratorRequest{}
	v22 := NewPopulatedClusterIdentifiers(r, easy)
	this.ClusterIdentifiers = *v22
	v23 := NewPopulatedOrganizationOrUserIdentifiers(r, easy)
	this.OrganizationOrUserIdentifiers = *v23
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSetClusterCollaboratorRequest(r randyCluster, easy bool) *SetClusterCollaboratorRequest {
	this := &SetClusterCollaboratorRequest{}
	v24 := NewPopulatedClusterIdentifiers(r, easy)
	this.ClusterIdentifiers = *v24
	v25 := NewPopulatedCollaborator(r, easy)
	this.Collaborator = *v25
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCluster interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCluster(r randyCluster) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCluster(r randyCluster) string {
	v26 := r.Intn(100)
	tmps := make([]rune, v26)
	for i := 0; i < v26; i++ {
		tmps[i] = randUTF8RuneCluster(r)
	}
	return string(tmps)
}
func randUnrecognizedCluster(r randyCluster, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCluster(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCluster(dAtA []byte, r randyCluster, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(key))
		v27 := r.Int63()
		if r.Intn(2) == 0 {
			v27 *= -1
		}
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(v27))
	case 1:
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCluster(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCluster(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PeerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GRPCPort != 0 {
		n += 1 + sovCluster(uint64(m.GRPCPort))
	}
	if m.TLS {
		n += 2
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovCluster(uint64(e))
		}
		n += 1 + sovCluster(uint64(l)) + l
	}
	if len(m.Tags) > 0 {
		for k, v := range m.Tags {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCluster(uint64(len(k))) + 1 + len(v) + sovCluster(uint64(len(v)))
			n += mapEntrySize + 1 + sovCluster(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Cluster) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClusterIdentifiers.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovCluster(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovCluster(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCluster(uint64(len(k))) + 1 + len(v) + sovCluster(uint64(len(v)))
			n += mapEntrySize + 1 + sovCluster(uint64(mapEntrySize))
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	l = len(m.Secret)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	l = m.Location.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = len(m.LocationDescription)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovCluster(uint64(e))
		}
		n += 1 + sovCluster(uint64(l)) + l
	}
	if len(m.Endpoints) > 0 {
		for _, e := range m.Endpoints {
			l = e.Size()
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	return n
}

func (m *Cluster_Endpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Roles) > 0 {
		l = 0
		for _, e := range m.Roles {
			l += sovCluster(uint64(e))
		}
		n += 1 + sovCluster(uint64(l)) + l
	}
	if m.Endpoint != nil {
		n += m.Endpoint.Size()
	}
	return n
}

func (m *Cluster_Endpoint_Grpc) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Grpc != nil {
		l = m.Grpc.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}
func (m *Cluster_Endpoint_GrpcHttp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GrpcHttp != nil {
		l = m.GrpcHttp.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}
func (m *Cluster_Endpoint_Http) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Http != nil {
		l = m.Http.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}
func (m *Cluster_Endpoint_Mqtt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Mqtt != nil {
		l = m.Mqtt.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}
func (m *Cluster_Endpoint_PacketForwarderUdp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PacketForwarderUdp != nil {
		l = m.PacketForwarderUdp.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}
func (m *Cluster_Endpoint_BackendInterfacesHttp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BackendInterfacesHttp != nil {
		l = m.BackendInterfacesHttp.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}
func (m *Cluster_Endpoint_BasicStationHttp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BasicStationHttp != nil {
		l = m.BasicStationHttp.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}
func (m *Cluster_Endpoint_GRPC) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovCluster(uint64(m.Port))
	}
	if m.Tls {
		n += 2
	}
	return n
}

func (m *Cluster_Endpoint_HTTP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovCluster(uint64(m.Port))
	}
	if m.Tls {
		n += 2
	}
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *Cluster_Endpoint_MQTT) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovCluster(uint64(m.Port))
	}
	if m.Tls {
		n += 2
	}
	return n
}

func (m *Cluster_Endpoint_UDP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovCluster(uint64(m.Port))
	}
	if m.Dtls {
		n += 2
	}
	return n
}

func (m *Clusters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Clusters) > 0 {
		for _, e := range m.Clusters {
			l = e.Size()
			n += 1 + l + sovCluster(uint64(l))
		}
	}
	return n
}

func (m *GetClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClusterIdentifiers.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func (m *GetClusterIdentifiersForAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	return n
}

func (m *ListClustersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Collaborator != nil {
		l = m.Collaborator.Size()
		n += 1 + l + sovCluster(uint64(l))
	}
	l = m.FieldMask.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovCluster(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovCluster(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCluster(uint64(m.Page))
	}
	return n
}

func (m *CreateClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cluster.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func (m *UpdateClusterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Cluster.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func (m *ListClusterCollaboratorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClusterIdentifiers.Size()
	n += 1 + l + sovCluster(uint64(l))
	if m.Limit != 0 {
		n += 1 + sovCluster(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovCluster(uint64(m.Page))
	}
	return n
}

func (m *GetClusterCollaboratorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClusterIdentifiers.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = m.OrganizationOrUserIdentifiers.Size()
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func (m *SetClusterCollaboratorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ClusterIdentifiers.Size()
	n += 1 + l + sovCluster(uint64(l))
	l = m.Collaborator.Size()
	n += 1 + l + sovCluster(uint64(l))
	return n
}

func sovCluster(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCluster(x uint64) (n int) {
	return sovCluster((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *PeerInfo) String() string {
	if this == nil {
		return "nil"
	}
	keysForTags := make([]string, 0, len(this.Tags))
	for k := range this.Tags {
		keysForTags = append(keysForTags, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTags)
	mapStringForTags := "map[string]string{"
	for _, k := range keysForTags {
		mapStringForTags += fmt.Sprintf("%v: %v,", k, this.Tags[k])
	}
	mapStringForTags += "}"
	s := strings.Join([]string{`&PeerInfo{`,
		`GRPCPort:` + fmt.Sprintf("%v", this.GRPCPort) + `,`,
		`TLS:` + fmt.Sprintf("%v", this.TLS) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`Tags:` + mapStringForTags + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster) String() string {
	if this == nil {
		return "nil"
	}
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Cluster{`,
		`ClusterIdentifiers:` + strings.Replace(strings.Replace(this.ClusterIdentifiers.String(), "ClusterIdentifiers", "ClusterIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(this.CreatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(this.UpdatedAt.String(), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ContactInfo:` + strings.Replace(fmt.Sprintf("%v", this.ContactInfo), "ContactInfo", "ContactInfo", 1) + `,`,
		`Addresses:` + fmt.Sprintf("%v", this.Addresses) + `,`,
		`Secret:` + fmt.Sprintf("%v", this.Secret) + `,`,
		`Location:` + strings.Replace(strings.Replace(this.Location.String(), "Location", "Location", 1), `&`, ``, 1) + `,`,
		`LocationDescription:` + fmt.Sprintf("%v", this.LocationDescription) + `,`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`Endpoints:` + strings.Replace(fmt.Sprintf("%v", this.Endpoints), "Cluster_Endpoint", "Cluster_Endpoint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint{`,
		`Roles:` + fmt.Sprintf("%v", this.Roles) + `,`,
		`Endpoint:` + fmt.Sprintf("%v", this.Endpoint) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_Grpc) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_Grpc{`,
		`Grpc:` + strings.Replace(fmt.Sprintf("%v", this.Grpc), "Cluster_Endpoint_GRPC", "Cluster_Endpoint_GRPC", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_GrpcHttp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_GrpcHttp{`,
		`GrpcHttp:` + strings.Replace(fmt.Sprintf("%v", this.GrpcHttp), "Cluster_Endpoint_HTTP", "Cluster_Endpoint_HTTP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_Http) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_Http{`,
		`Http:` + strings.Replace(fmt.Sprintf("%v", this.Http), "Cluster_Endpoint_HTTP", "Cluster_Endpoint_HTTP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_Mqtt) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_Mqtt{`,
		`Mqtt:` + strings.Replace(fmt.Sprintf("%v", this.Mqtt), "Cluster_Endpoint_MQTT", "Cluster_Endpoint_MQTT", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_PacketForwarderUdp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_PacketForwarderUdp{`,
		`PacketForwarderUdp:` + strings.Replace(fmt.Sprintf("%v", this.PacketForwarderUdp), "Cluster_Endpoint_UDP", "Cluster_Endpoint_UDP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_BackendInterfacesHttp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_BackendInterfacesHttp{`,
		`BackendInterfacesHttp:` + strings.Replace(fmt.Sprintf("%v", this.BackendInterfacesHttp), "Cluster_Endpoint_HTTP", "Cluster_Endpoint_HTTP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_BasicStationHttp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_BasicStationHttp{`,
		`BasicStationHttp:` + strings.Replace(fmt.Sprintf("%v", this.BasicStationHttp), "Cluster_Endpoint_HTTP", "Cluster_Endpoint_HTTP", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_GRPC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_GRPC{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Tls:` + fmt.Sprintf("%v", this.Tls) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_HTTP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_HTTP{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Tls:` + fmt.Sprintf("%v", this.Tls) + `,`,
		`Path:` + fmt.Sprintf("%v", this.Path) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_MQTT) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_MQTT{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Tls:` + fmt.Sprintf("%v", this.Tls) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cluster_Endpoint_UDP) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cluster_Endpoint_UDP{`,
		`Host:` + fmt.Sprintf("%v", this.Host) + `,`,
		`Port:` + fmt.Sprintf("%v", this.Port) + `,`,
		`Dtls:` + fmt.Sprintf("%v", this.Dtls) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Clusters) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Clusters{`,
		`Clusters:` + strings.Replace(fmt.Sprintf("%v", this.Clusters), "Cluster", "Cluster", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterRequest{`,
		`ClusterIdentifiers:` + strings.Replace(strings.Replace(this.ClusterIdentifiers.String(), "ClusterIdentifiers", "ClusterIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterIdentifiersForAddressRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterIdentifiersForAddressRequest{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClustersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClustersRequest{`,
		`Collaborator:` + strings.Replace(fmt.Sprintf("%v", this.Collaborator), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateClusterRequest{`,
		`Cluster:` + strings.Replace(strings.Replace(this.Cluster.String(), "Cluster", "Cluster", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(this.Collaborator.String(), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateClusterRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateClusterRequest{`,
		`Cluster:` + strings.Replace(strings.Replace(this.Cluster.String(), "Cluster", "Cluster", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(this.FieldMask.String(), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListClusterCollaboratorsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListClusterCollaboratorsRequest{`,
		`ClusterIdentifiers:` + strings.Replace(strings.Replace(this.ClusterIdentifiers.String(), "ClusterIdentifiers", "ClusterIdentifiers", 1), `&`, ``, 1) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetClusterCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetClusterCollaboratorRequest{`,
		`ClusterIdentifiers:` + strings.Replace(strings.Replace(this.ClusterIdentifiers.String(), "ClusterIdentifiers", "ClusterIdentifiers", 1), `&`, ``, 1) + `,`,
		`OrganizationOrUserIdentifiers:` + strings.Replace(strings.Replace(this.OrganizationOrUserIdentifiers.String(), "OrganizationOrUserIdentifiers", "OrganizationOrUserIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SetClusterCollaboratorRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SetClusterCollaboratorRequest{`,
		`ClusterIdentifiers:` + strings.Replace(strings.Replace(this.ClusterIdentifiers.String(), "ClusterIdentifiers", "ClusterIdentifiers", 1), `&`, ``, 1) + `,`,
		`Collaborator:` + strings.Replace(strings.Replace(this.Collaborator.String(), "Collaborator", "Collaborator", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCluster(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PeerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PeerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PeerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GRPCPort", wireType)
			}
			m.GRPCPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GRPCPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TLS", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TLS = bool(v != 0)
		case 3:
			if wireType == 0 {
				var v ClusterRole
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ClusterRole(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCluster
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCluster
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]ClusterRole, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ClusterRole
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCluster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ClusterRole(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tags == nil {
				m.Tags = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCluster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCluster
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCluster
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCluster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCluster
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCluster
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCluster(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCluster
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Tags[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cluster: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cluster: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCluster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCluster
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCluster
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCluster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCluster
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCluster
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCluster(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCluster
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ContactInfo{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secret", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secret = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationDescription", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocationDescription = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v ClusterRole
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ClusterRole(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCluster
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCluster
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]ClusterRole, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ClusterRole
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCluster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ClusterRole(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoints = append(m.Endpoints, &Cluster_Endpoint{})
			if err := m.Endpoints[len(m.Endpoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster_Endpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Endpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Endpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v ClusterRole
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= ClusterRole(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Roles = append(m.Roles, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCluster
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCluster
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Roles) == 0 {
					m.Roles = make([]ClusterRole, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v ClusterRole
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCluster
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= ClusterRole(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Roles = append(m.Roles, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Roles", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Grpc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cluster_Endpoint_GRPC{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Endpoint = &Cluster_Endpoint_Grpc{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GrpcHttp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cluster_Endpoint_HTTP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Endpoint = &Cluster_Endpoint_GrpcHttp{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Http", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cluster_Endpoint_HTTP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Endpoint = &Cluster_Endpoint_Http{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mqtt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cluster_Endpoint_MQTT{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Endpoint = &Cluster_Endpoint_Mqtt{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PacketForwarderUdp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cluster_Endpoint_UDP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Endpoint = &Cluster_Endpoint_PacketForwarderUdp{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackendInterfacesHttp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cluster_Endpoint_HTTP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Endpoint = &Cluster_Endpoint_BackendInterfacesHttp{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BasicStationHttp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Cluster_Endpoint_HTTP{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Endpoint = &Cluster_Endpoint_BasicStationHttp{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster_Endpoint_GRPC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GRPC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GRPC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tls = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster_Endpoint_HTTP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tls = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster_Endpoint_MQTT) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MQTT: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MQTT: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tls = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cluster_Endpoint_UDP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UDP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UDP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtls", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Dtls = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Clusters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Clusters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Clusters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clusters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Clusters = append(m.Clusters, &Cluster{})
			if err := m.Clusters[len(m.Clusters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterIdentifiersForAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterIdentifiersForAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterIdentifiersForAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClustersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClustersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClustersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Collaborator == nil {
				m.Collaborator = &OrganizationOrUserIdentifiers{}
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateClusterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateClusterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateClusterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cluster", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Cluster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListClusterCollaboratorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListClusterCollaboratorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListClusterCollaboratorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetClusterCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetClusterCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetClusterCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrganizationOrUserIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OrganizationOrUserIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetClusterCollaboratorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetClusterCollaboratorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetClusterCollaboratorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClusterIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collaborator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCluster
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCluster
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Collaborator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCluster(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCluster
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCluster(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCluster
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCluster
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCluster
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCluster
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCluster
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCluster(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCluster
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCluster = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCluster   = fmt.Errorf("proto: integer overflow")
)
